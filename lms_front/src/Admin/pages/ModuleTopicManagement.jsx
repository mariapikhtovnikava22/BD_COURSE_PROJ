import React, { useState, useEffect } from "react";
import { AdminModulesService, AdminTopicsService, AdminLevelsService } from "../../api";

const ModuleTopicManagement = () => {
  const [modules, setModules] = useState([]);
  const [topics, setTopics] = useState([]);
  const [levels, setLevels] = useState([]); // –£—Ä–æ–≤–Ω–∏ –¥–ª—è –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞
  const [expandedModuleId, setExpandedModuleId] = useState(null); // ID —Ä–∞—Å–∫—Ä—ã—Ç–æ–≥–æ –º–æ–¥—É–ª—è
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState("");
  const [showTopicModal, setShowTopicModal] = useState(false);
  const [showModuleModal, setShowModuleModal] = useState(false);
  const [newTopic, setNewTopic] = useState({ name: "", description: "" });
  const [newModule, setNewModule] = useState({ name: "", description: "", level_id: "" });
  const [currentModuleId, setCurrentModuleId] = useState(null); // ID –º–æ–¥—É–ª—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–º—ã
  const [currentModuleEditId, setCurrentModuleEditId] = useState(null); // ID –º–æ–¥—É–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  const [currentTopicId, setCurrentTopicId] = useState(null); // ID —Ç–µ–º—ã –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  const [formError, setFormError] = useState(""); // –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º—ã
  const [success, setSuccess] = useState(""); // –£—Å–ø–µ—Ö

  const fetchData = async () => {
    try {
      const [modulesData, topicsData, levelsData] = await Promise.all([
        AdminModulesService.getAllModules(),
        AdminTopicsService.getAllTopics(),
        AdminLevelsService.getalllevels(),
      ]);

      setModules(modulesData);
      setTopics(topicsData);
      setLevels(levelsData);
    } catch (err) {
      setError("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö");
      console.error(err);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchData();
  }, []);

  const getTopicsByModuleName = (moduleName) => {
    console.log(moduleName);
    return topics.filter((topic) => topic.module_name === moduleName);
  };

  const toggleModule = (moduleId) => {
    setExpandedModuleId(expandedModuleId === moduleId ? null : moduleId);
  };

  const handleAddTopic = (moduleId) => {
    setCurrentModuleId(moduleId);
    setCurrentTopicId(null);
    setNewTopic({ name: "", description: "" });
    setFormError("");
    setSuccess("");
    setShowTopicModal(true);
  };

  const handleEditTopic = (topic) => {
    setCurrentModuleId(topic.module_id);
    setCurrentTopicId(topic.id);
    setNewTopic({ name: topic.name, description: topic.description });
    setFormError("");
    setSuccess("");
    setShowTopicModal(true);
  };

  const handleDeleteTopic = async (topicId) => {
    if (window.confirm("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ç–µ–º—É?")) {
      try {
        await AdminTopicsService.deleteTopic(topicId);
        setTopics((prevTopics) => prevTopics.filter((topic) => topic.id !== topicId));
      } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–µ–º—ã:", error);
      }
    }
  };

  const handleEditModule = (module) => {
    console.log("–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã–π –º–æ–¥—É–ª—å:", module);
  
    // –ù–∞—Ö–æ–¥–∏–º level_id –ø–æ level_name
    const matchedLevel = levels.find((level) => level.name === module.level_name);
  
    setCurrentModuleEditId(module.id); // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –º–æ–¥—É–ª—è
    setNewModule({
      name: module.name,
      description: module.description,
      level_id: matchedLevel ? matchedLevel.id : "", // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º level_id –∏–ª–∏ –ø—É—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    });
    setFormError("");
    setSuccess("");
    setShowModuleModal(true);
  };
  
  const handleDeleteModule = async (moduleId) => {
    if (window.confirm("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –º–æ–¥—É–ª—å?")) {
      try {
        await AdminModulesService.deleteModule(moduleId);
        setModules((prevModules) => prevModules.filter((module) => module.id !== moduleId));
      } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –º–æ–¥—É–ª—è:", error);
      }
    }
  };

  const saveModule = async () => {
    if (!newModule.name.trim() || !newModule.level_id) {
      setFormError("–ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è –∏ —É—Ä–æ–≤–µ–Ω—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã");
      return;
    }
  
    try {
      let updatedModule;
      if (currentModuleEditId) {
        // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è
        updatedModule = await AdminModulesService.updateModule(currentModuleEditId, newModule);
        setModules((prevModules) =>
          prevModules.map((module) => (module.id === currentModuleEditId ? updatedModule : module))
        );
  
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ module_name —É —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Ç–µ–º
        setTopics((prevTopics) =>
          prevTopics.map((topic) =>
            topic.module_name === modules.find((m) => m.id === currentModuleEditId)?.name
              ? { ...topic, module_name: updatedModule.name }
              : topic
          )
        );
      } else {
        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –º–æ–¥—É–ª—è
        const createdModule = await AdminModulesService.createModule(newModule);
        setModules((prevModules) => [...prevModules, createdModule]);
      }
  
      setSuccess("–ú–æ–¥—É–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!");
      setTimeout(() => {
        setShowModuleModal(false);
        setSuccess("");
      }, 1000);
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –º–æ–¥—É–ª—è:", error);
      setFormError(error || "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –º–æ–¥—É–ª—å");
    }
  };
  

  const saveTopic = async () => {
    if (!newTopic.name.trim()) {
      setFormError("–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ");
      return;
    }

    try {
      if (currentTopicId) {
        // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–º—ã
        const updatedTopic = await AdminTopicsService.updateTopic(currentTopicId, {
          ...newTopic,
          module_id: currentModuleId,
        });

        setTopics((prevTopics) =>
          prevTopics.map((topic) =>
            topic.id === currentTopicId ? { ...updatedTopic, module_name: updatedTopic.module_name } : topic
          )
        );
      } else {
        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Ç–µ–º—ã
        const createdTopic = await AdminTopicsService.createTopic({
          ...newTopic,
          module_id: currentModuleId,
        });

        setTopics((prevTopics) => [
          ...prevTopics,
          { ...createdTopic, module_name: modules.find((m) => m.id === currentModuleId)?.name },
        ]);
      }

      setSuccess("–¢–µ–º–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!");
      setTimeout(() => {
        setShowTopicModal(false);
        setSuccess("");
      }, 1000);
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–µ–º—ã:", error);
      setFormError(error || "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ–º—É");
    }
  };

  return (
  <div>
    <h2 className="my-4">–ü—Ä–æ–≥—Ä–∞–º–º–∞ –∫—É—Ä—Å–∞</h2>
    <div>
      {modules.map((module) => (
        <div key={module.id} className="module mb-4">
          <div className="d-flex justify-content-between align-items-center p-3 bg-light rounded">
            <div>
              <h5 className="mb-0">{module.name}</h5>
              {module.description && <small className="text-muted">{module.description}</small>}
            </div>
            <div>
            <button
                className="btn btn-sm me-2"
                onClick={() => handleEditModule(module)}
                title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"
                style={{ border: "none", background: "transparent", fontSize: "1rem" }}
            >
                ‚úèÔ∏è
            </button>
            <button
                className="btn btn-sm me-2"
                onClick={() => handleDeleteModule(module.id)}
                title="–£–¥–∞–ª–∏—Ç—å"
                style={{ border: "none", background: "transparent", fontSize: "1rem" }}
            >
                üóëÔ∏è
            </button>
            <button
                className="btn  btn-sm"
                onClick={() => toggleModule(module.id)}
                title={expandedModuleId === module.id ? "–°–≤–µ—Ä–Ω—É—Ç—å" : "–†–∞–∑–≤–µ—Ä–Ω—É—Ç—å"}
                style={{ border: "none", background: "transparent", fontSize: "1rem" }}
            >
                {expandedModuleId === module.id ? "üîº" : "üîΩ"}
            </button>
            </div>

          </div>

          {expandedModuleId === module.id && (
            <div className="topics mt-3 ps-4">
              <h6>–¢–µ–º—ã:</h6>
              <ul className="list-group">
                {getTopicsByModuleName(module.name).map((topic) => (
                  <li key={topic.id} className="list-group-item d-flex justify-content-between align-items-center">
                    <div>
                      <strong>{topic.name}</strong>
                      {topic.description && <small className="text-muted d-block">{topic.description}</small>}
                    </div>
                    <div>
                      <button
                        className="btn btn-primary btn-sm me-2"
                        onClick={() => handleEditTopic(topic)}
                      >
                        –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                      </button>
                      <button
                        className="btn btn-danger btn-sm"
                        onClick={() => handleDeleteTopic(topic.id)}
                      >
                        –£–¥–∞–ª–∏—Ç—å
                      </button>
                    </div>
                  </li>
                ))}
                {getTopicsByModuleName(module.name).length === 0 && (
                  <p className="text-muted">–¢–µ–º—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç</p>
                )}
              </ul>
              <button
                className="btn btn-success mt-3"
                onClick={() => handleAddTopic(module.id)}
              >
                –î–æ–±–∞–≤–∏—Ç—å —Ç–µ–º—É
              </button>
            </div>
          )}
        </div>
      ))}
    </div>

    <button className="btn btn-success mt-4" onClick={() => setShowModuleModal(true)}>
      –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –º–æ–¥—É–ª—å
    </button>

    {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è —Ç–µ–º */}
    {showTopicModal && (
      <div
        className="modal"
        style={{
          position: "fixed",
          top: 0,
          left: 0,
          width: "100%",
          height: "100%",
          backgroundColor: "rgba(0, 0, 0, 0.5)",
          display: "flex",
          justifyContent: "center",
          alignItems: "center",
        }}
      >
        <form
          className="needs-validation"
          onSubmit={(e) => e.preventDefault()}
          style={{
            backgroundColor: "#fff",
            borderRadius: "10px",
            padding: "20px",
            width: "400px",
          }}
        >
          <h5>{currentTopicId ? "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–º—É" : "–î–æ–±–∞–≤–∏—Ç—å —Ç–µ–º—É"}</h5>
          <div className="mb-3">
            <label htmlFor="topicName">–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã</label>
            <input
              type="text"
              id="topicName"
              className="form-control"
              value={newTopic.name}
              onChange={(e) => setNewTopic({ ...newTopic, name: e.target.value })}
            />
          </div>
          <div className="mb-3">
            <label htmlFor="topicDescription">–û–ø–∏—Å–∞–Ω–∏–µ</label>
            <textarea
              id="topicDescription"
              className="form-control"
              value={newTopic.description}
              onChange={(e) => setNewTopic({ ...newTopic, description: e.target.value })}
            />
          </div>

          {formError && <div className="alert alert-danger">{formError}</div>}
          {success && <div className="alert alert-success">{success}</div>}

          <div className="text-end">
            <button
              className="btn btn-secondary me-2"
              onClick={() => setShowTopicModal(false)}
            >
              –û—Ç–º–µ–Ω–∞
            </button>
            <button className="btn btn-primary" onClick={saveTopic}>
              –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
            </button>
          </div>
        </form>
      </div>
    )}

    {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –º–æ–¥—É–ª–µ–π */}
    {showModuleModal && (
      <div
        className="modal"
        style={{
          position: "fixed",
          top: 0,
          left: 0,
          width: "100%",
          height: "100%",
          backgroundColor: "rgba(0, 0, 0, 0.5)",
          display: "flex",
          justifyContent: "center",
          alignItems: "center",
        }}
      >
        <form
          className="needs-validation"
          onSubmit={(e) => e.preventDefault()}
          style={{
            backgroundColor: "#fff",
            borderRadius: "10px",
            padding: "20px",
            width: "400px",
          }}
        >
          <h5>{currentModuleEditId ? "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥—É–ª—å" : "–î–æ–±–∞–≤–∏—Ç—å –º–æ–¥—É–ª—å"}</h5>
          <div className="mb-3">
            <label htmlFor="moduleName">–ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è</label>
            <input
              type="text"
              id="moduleName"
              className="form-control"
              value={newModule.name}
              onChange={(e) => setNewModule({ ...newModule, name: e.target.value })}
            />
          </div>
          <div className="mb-3">
            <label htmlFor="moduleDescription">–û–ø–∏—Å–∞–Ω–∏–µ</label>
            <textarea
              id="moduleDescription"
              className="form-control"
              value={newModule.description}
              onChange={(e) => setNewModule({ ...newModule, description: e.target.value })}
            />
          </div>
          <div className="mb-3">
            <label htmlFor="moduleLevel">–£—Ä–æ–≤–µ–Ω—å</label>
            <select
              id="moduleLevel"
              className="form-control"
              value={newModule.level_id || ""}
              onChange={(e) => setNewModule({ ...newModule, level_name: e.target.value })}
            >
              <option value="">–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å</option>
              {levels.map((level) => (
                <option key={level.id} value={level.id}>
                  {level.name}
                </option>
              ))}
            </select>
          </div>

          {formError && <div className="alert alert-danger">{formError}</div>}
          {success && <div className="alert alert-success">{success}</div>}

          <div className="text-end">
            <button
              className="btn btn-secondary me-2"
              onClick={() => setShowModuleModal(false)}
            >
              –û—Ç–º–µ–Ω–∞
            </button>
            <button className="btn btn-primary" onClick={saveModule}>
              –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
            </button>
          </div>
        </form>
      </div>
    )}
  </div>
);
};

export default ModuleTopicManagement;
